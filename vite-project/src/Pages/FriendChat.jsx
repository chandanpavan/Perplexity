import React, { useEffect, useRef, useState } from 'react';
import { io } from 'socket.io-client';

// Initialize socket once, but connect only when needed
const socket = io('http://localhost:5000', {
Â  auth: { token: localStorage.getItem('token') },
Â  autoConnect: false,
});

export default function FriendChat({ friend }) {
Â  const [messages, setMessages] = useState([]);
Â  const [input, setInput] = useState('');
Â  const currentUserId = localStorage.getItem('user_id');
Â  const bottomRef = useRef(null);

Â  // Auto-scroll to bottom on message update
Â  useEffect(() => {
Â  Â  if (bottomRef.current) bottomRef.current.scrollIntoView({ behavior: 'smooth' });
Â  }, [messages]);

Â  // Connect to socket and load chat history
Â  useEffect(() => {
Â  Â  if (!friend) return;

Â  Â  socket.connect();

Â  Â  // Fetch chat history
Â  Â  fetch(`http://localhost:5000/api/messages/dm/${friend._id}`, {
Â  Â  Â  headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
Â  Â  })
Â  Â  Â  .then((res) => res.json())
Â  Â  Â  .then((data) => setMessages(data || []));

Â  Â  // Listen for incoming messages
Â  Â  const listener = (msg) => {
Â  Â  Â  const isRelevant =
Â  Â  Â  Â  (msg.senderId === friend._id && msg.receiverId === currentUserId) ||
Â  Â  Â  Â  (msg.senderId === currentUserId && msg.receiverId === friend._id);

Â  Â  Â  if (isRelevant) {
Â  Â  Â  Â  setMessages((prev) => [...prev, msg]);
Â  Â  Â  }
Â  Â  };

Â  Â  socket.on('receive-dm', listener);

Â  Â  return () => {
Â  Â  Â  socket.off('receive-dm', listener);
Â  Â  Â  socket.disconnect();
Â  Â  };
Â  }, [friend, currentUserId]);

Â  // Send message
Â  const send = () => {
Â  Â  if (!input.trim()) return;

Â  Â  const message = {
Â  Â  Â  toUserId: friend._id,
Â  Â  Â  message: input,
Â  Â  };

Â  Â  socket.emit('send-dm', message);

Â  Â  // Local bubble (optimistic UI)
Â  Â  setMessages((prev) => [
Â  Â  Â  ...prev,
Â  Â  Â  {
Â  Â  Â  Â  message: input,
Â  Â  Â  Â  senderId: currentUserId,
Â  Â  Â  Â  receiverId: friend._id,
Â  Â  Â  Â  timestamp: new Date().toISOString(),
Â  Â  Â  },
Â  Â  ]);
Â  Â  setInput('');
Â  };

Â  return (
Â  Â  <div
Â  Â  Â  style={{
Â  Â  Â  Â  maxWidth: '800px',
Â  Â  Â  Â  margin: '1rem auto',
Â  Â  Â  Â  padding: '1rem',
Â  Â  Â  Â  background: '#2e1c3e',
Â  Â  Â  Â  borderRadius: '12px',
Â  Â  Â  Â  color: '#fff',
Â  Â  Â  Â  boxShadow: '0 0 10px rgba(0, 0, 0, 0.4)',
Â  Â  Â  Â  display: 'flex',
Â  Â  Â  Â  flexDirection: 'column',
Â  Â  Â  Â  height: '80vh',
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <h2 style={{ marginBottom: '1rem', textAlign: 'center', color: '#ddb6ff' }}>
Â  Â  Â  Â  ðŸ’¬ Chat with {friend.email}
Â  Â  Â  </h2>

Â  Â  Â  {/* Chat Scroll Area */}
Â  Â  Â  <div
Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  flex: 1,
Â  Â  Â  Â  Â  overflowY: 'auto',
Â  Â  Â  Â  Â  padding: '1rem',
Â  Â  Â  Â  Â  background: '#301f45',
Â  Â  Â  Â  Â  borderRadius: '10px',
Â  Â  Â  Â  Â  marginBottom: '1rem',
Â  Â  Â  Â  Â  scrollBehavior: 'smooth',
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  {messages.map((msg, i) => {
Â  Â  Â  Â  Â  const isMine = msg.senderId === currentUserId;
Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  key={i}
Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  marginBottom: '0.6rem',
Â  Â  Â  Â  Â  Â  Â  Â  textAlign: isMine ? 'right' : 'left',
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <span
Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  display: 'inline-block',
Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: '0.65rem 1rem',
Â  Â  Â  Â  Â  Â  Â  Â  Â  background: isMine ? '#9355f5' : '#444',
Â  Â  Â  Â  Â  Â  Â  Â  Â  color: '#fff',
Â  Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: '12px',
Â  Â  Â  Â  Â  Â  Â  Â  Â  maxWidth: '75%',
Â  Â  Â  Â  Â  Â  Â  Â  Â  wordBreak: 'break-word',
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {msg.message}
Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  );
Â  Â  Â  Â  })}
Â  Â  Â  Â  <div ref={bottomRef} />
Â  Â  Â  </div>

Â  Â  Â  {/* Input Area */}
Â  Â  Â  <div
Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  display: 'flex',
Â  Â  Â  Â  Â  flexDirection: window.innerWidth < 650 ? 'column' : 'row',
Â  Â  Â  Â  Â  gap: '0.6rem',
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  value={input}
Â  Â  Â  Â  Â  onChange={(e) => setInput(e.target.value)}
Â  Â  Â  Â  Â  placeholder="Type a message"
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  flex: 1,
Â  Â  Â  Â  Â  Â  padding: '0.75rem',
Â  Â  Â  Â  Â  Â  borderRadius: '8px',
Â  Â  Â  Â  Â  Â  border: 'none',
Â  Â  Â  Â  Â  Â  fontSize: '1rem',
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  onKeyDown={(e) => e.key === 'Enter' && send()}
Â  Â  Â  Â  />
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={send}
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  background: '#9355f5',
Â  Â  Â  Â  Â  Â  padding: '0.75rem 1.25rem',
Â  Â  Â  Â  Â  Â  borderRadius: '8px',
Â  Â  Â  Â  Â  Â  border: 'none',
Â  Â  Â  Â  Â  Â  color: '#fff',
Â  Â  Â  Â  Â  Â  fontWeight: 600,
Â  Â  Â  Â  Â  Â  cursor: 'pointer',
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Send
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}
