import React, { useEffect, useState } from 'react';

const styles = {
┬а container: {
┬а ┬а minHeight: '100vh',
┬а ┬а padding: '3rem',
┬а ┬а background: 'linear-gradient(to bottom, #1f0029, #2a004a)',
┬а ┬а color: '#fff',
┬а ┬а fontFamily: 'Poppins, sans-serif',
┬а ┬а maxWidth: '900px',
┬а ┬а margin: '0 auto',
┬а },
┬а title: {
┬а ┬а fontSize: '2.5rem',
┬а ┬а color: '#dcb2ff',
┬а ┬а textAlign: 'center',
┬а ┬а marginBottom: '2.5rem',
┬а ┬а textShadow: '0 2px 12px rgba(208,128,255,0.3)',
┬а },
┬а infoBox: {
┬а ┬а background: '#2e1c3e',
┬а ┬а padding: '2rem',
┬а ┬а borderRadius: '14px',
┬а ┬а boxShadow: '0 6px 24px rgba(100,100,255,0.15)',
┬а ┬а marginBottom: '2rem',
┬а },
┬а label: {
┬а ┬а color: '#bbb',
┬а ┬а fontSize: '1rem',
┬а ┬а fontWeight: '500',
┬а ┬а marginBottom: '0.3rem',
┬а },
┬а value: {
┬а ┬а fontSize: '1.3rem',
┬а ┬а fontWeight: '600',
┬а ┬а color: '#fff',
┬а ┬а marginBottom: '1.2rem',
┬а },
┬а badge: {
┬а ┬а fontSize: '1.6rem',
┬а ┬а textAlign: 'center',
┬а ┬а marginTop: '1rem',
┬а ┬а color: '#ffe97f',
┬а },
┬а achievementsGrid: {
┬а ┬а display: 'flex',
┬а ┬а flexWrap: 'wrap',
┬а ┬а gap: '1.2rem',
┬а },
┬а achievementCard: unlocked => ({
┬а ┬а flex: '1 1 150px',
┬а ┬а minWidth: '120px',
┬а ┬а background: unlocked ? '#5e3a9f' : '#513962',
┬а ┬а borderRadius: '10px',
┬а ┬а textAlign: 'center',
┬а ┬а padding: '1rem',
┬а ┬а color: unlocked ? '#ffffff' : '#999999',
┬а ┬а opacity: unlocked ? 1 : 0.5,
┬а ┬а transition: 'transform 0.2s',
┬а }),
};

export default function Profile() {
┬а const token = localStorage.getItem('token');
┬а const email = localStorage.getItem('email');
┬а const userId = localStorage.getItem('user_id');

┬а const [userInfo, setUserInfo] = useState({ xp: 0, email: '' });
┬а const [winCount, setWinCount] = useState(0);
┬а const [matchCount, setMatchCount] = useState(0);
┬а const [squad, setSquad] = useState(null);
┬а const [history, setHistory] = useState([]);

┬а const level = Math.floor(userInfo.xp / 100);

┬а const getBadge = lvl => {
┬а ┬а if (lvl >= 10) return '­ЪЈЁ Pro Legend';
┬а ┬а if (lvl >= 5) return '­ЪЦѕ Battle Master';
┬а ┬а if (lvl >= 2) return '­ЪЦЅ Rising Star';
┬а ┬а return '­Ъј« Rookie';
┬а };

┬а const achievements = [
┬а ┬а { name: 'First Match', icon: '­ЪјЅ', unlocked: matchCount >= 1 },
┬а ┬а { name: 'First Win', icon: '­ЪЈє', unlocked: winCount >= 1 },
┬а ┬а { name: '5 Wins', icon: '­ЪћЦ', unlocked: winCount >= 5 },
┬а ┬а { name: '500 XP Club', icon: '­Ъњј', unlocked: userInfo.xp >= 500 },
┬а ┬а { name: 'Pro Level 10', icon: '­ЪЉЉ', unlocked: level >= 10 },
┬а ];

┬а useEffect(() => {
┬а ┬а fetch('http://localhost:5000/api/profile/me', {
┬а ┬а ┬а headers: { Authorization: `Bearer ${token}` },
┬а ┬а })
┬а ┬а ┬а .then(res => res.json())
┬а ┬а ┬а .then(data => data?.email && setUserInfo(data));

┬а ┬а fetch('http://localhost:5000/api/match/history', {
┬а ┬а ┬а headers: { Authorization: `Bearer ${token}` },
┬а ┬а })
┬а ┬а ┬а .then(res => res.json())
┬а ┬а ┬а .then(data => {
┬а ┬а ┬а ┬а setMatchCount(data.length || 0);
┬а ┬а ┬а ┬а setWinCount(data.filter(m => m.winner === email).length);
┬а ┬а ┬а });

┬а ┬а fetch('http://localhost:5000/api/squads/my', {
┬а ┬а ┬а headers: { Authorization: `Bearer ${token}` },
┬а ┬а })
┬а ┬а ┬а .then(res => res.json())
┬а ┬а ┬а .then(data => !data.message && setSquad(data));

┬а ┬а fetch('http://localhost:5000/api/profile/history', {
┬а ┬а ┬а headers: { Authorization: `Bearer ${token}` },
┬а ┬а })
┬а ┬а ┬а .then(res => res.json())
┬а ┬а ┬а .then(data => setHistory(data?.slice(0, 5)));
┬а }, [token, email]);

┬а const isLeader = squad?.leader?._id === userId;

┬а return (
┬а ┬а <div style={styles.container}>
┬а ┬а ┬а <h1 style={styles.title}>­ЪДЉ Your Player Profile</h1>

┬а ┬а ┬а {/* ­ЪЊї Profile Data */}
┬а ┬а ┬а <div style={styles.infoBox}>
┬а ┬а ┬а ┬а <div style={styles.label}>Email</div>
┬а ┬а ┬а ┬а <div style={styles.value}>{userInfo.email}</div>

┬а ┬а ┬а ┬а <div style={styles.label}>Level</div>
┬а ┬а ┬а ┬а <div style={styles.value}>{level}</div>

┬а ┬а ┬а ┬а <div style={styles.label}>XP</div>
┬а ┬а ┬а ┬а <div style={styles.value}>{userInfo.xp || 0} XP</div>

┬а ┬а ┬а ┬а <div style={styles.label}>Badge</div>
┬а ┬а ┬а ┬а <div style={styles.badge}>{getBadge(level)}</div>
┬а ┬а ┬а </div>

┬а ┬а ┬а {/* ­ЪЊі Match Stats */}
┬а ┬а ┬а <div style={styles.infoBox}>
┬а ┬а ┬а ┬а <div style={styles.label}>Matches Played</div>
┬а ┬а ┬а ┬а <div style={styles.value}>{matchCount}</div>

┬а ┬а ┬а ┬а <div style={styles.label}>Matches Won</div>
┬а ┬а ┬а ┬а <div style={styles.value}>{winCount}</div>

┬а ┬а ┬а ┬а <div style={styles.label}>Win Rate</div>
┬а ┬а ┬а ┬а <div style={styles.value}>
┬а ┬а ┬а ┬а ┬а {matchCount > 0 ? `${Math.round((winCount / matchCount) * 100)}%` : '0%'}
┬а ┬а ┬а ┬а </div>

┬а ┬а ┬а ┬а <div style={styles.label}>Kills</div>
┬а ┬а ┬а ┬а <div style={styles.value}>{userInfo.totalKills || 0}</div>

┬а ┬а ┬а ┬а <div style={styles.label}>Placement Points</div>
┬а ┬а ┬а ┬а <div style={styles.value}>{userInfo.placementPoints || 0}</div>
┬а ┬а ┬а </div>

┬а ┬а ┬а {/* ­ЪЏА№ИЈ Squad */}
┬а ┬а ┬а {squad && (
┬а ┬а ┬а ┬а <div style={styles.infoBox}>
┬а ┬а ┬а ┬а ┬а <div style={styles.label}>Squad Name</div>
┬а ┬а ┬а ┬а ┬а <div style={styles.value}>­ЪЏА {squad.name}</div>

┬а ┬а ┬а ┬а ┬а <div style={styles.label}>Your Role</div>
┬а ┬а ┬а ┬а ┬а <div style={styles.value}>{isLeader ? '­ЪЉЉ Leader' : '­Ъјќ Member'}</div>

┬а ┬а ┬а ┬а ┬а <div style={styles.label}>Total Members</div>
┬а ┬а ┬а ┬а ┬а <div style={styles.value}>{squad.members.length}</div>
┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а )}

┬а ┬а ┬а {/* ­ЪЈЁ Achievements */}
┬а ┬а ┬а <div style={styles.infoBox}>
┬а ┬а ┬а ┬а <div style={{ ...styles.label, fontSize: '1.1rem', marginBottom: '1rem' }}>
┬а ┬а ┬а ┬а ┬а ­ЪЈЁ Achievements
┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а <div style={styles.achievementsGrid}>
┬а ┬а ┬а ┬а ┬а {achievements.map((ach, i) => (
┬а ┬а ┬а ┬а ┬а ┬а <div key={i} style={styles.achievementCard(ach.unlocked)}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а <div style={{ fontSize: '2rem' }}>{ach.icon}</div>
┬а ┬а ┬а ┬а ┬а ┬а ┬а <div style={{ marginTop: '0.5rem', fontWeight: 500 }}>{ach.name}</div>
┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ))}
┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а </div>

┬а ┬а ┬а {/* ­ЪЊѕ XP Logs */}
┬а ┬а ┬а <div style={styles.infoBox}>
┬а ┬а ┬а ┬а <div style={{ ...styles.label, marginBottom: '1rem' }}>­ЪЊѕ Recent XP Matches</div>
┬а ┬а ┬а ┬а {history.length === 0 ? (
┬а ┬а ┬а ┬а ┬а <div style={{ color: '#ccc' }}>No recent XP activities.</div>
┬а ┬а ┬а ┬а ) : (
┬а ┬а ┬а ┬а ┬а history.map((entry, i) => (
┬а ┬а ┬а ┬а ┬а ┬а <div key={i} style={{ marginBottom: '1rem' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а <strong style={{ fontSize: '1rem' }}>{entry.tournamentName || 'Match'}</strong>
┬а ┬а ┬а ┬а ┬а ┬а ┬а <div style={{ fontSize: '0.95rem', marginTop: '0.25rem' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ­ЪћФ {entry.kills} Kills | ­ЪДЕ {entry.placement} Place | ­ЪДа {entry.earnedXP} XP
┬а ┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а ┬а <div style={{ color: '#aaa', fontSize: '0.8rem', marginTop: '0.2rem' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {new Date(entry.timestamp).toLocaleString()}
┬а ┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ))
┬а ┬а ┬а ┬а )}
┬а ┬а ┬а </div>
┬а ┬а </div>
┬а );
}
